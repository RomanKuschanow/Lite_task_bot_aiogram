from aiogram.types import CallbackQuery
from aiogram.types import Message

from bot.keyboards.inline.payment import get_payment_inline_markup
from bot.states import Balance
from loader import dp
from models import User, Bill
from services.bill import create_bill, generate_invoice_link, check_bill
from utils.misc.logging import logger


@dp.message_handler(commands='balance', state='*')
async def _user_balance(message: Message, user: User):
    text = f'–ë–∞–ª–∞–Ω—Å: {round(user.balance, 2)} –≥—Ä–Ω.'

    await message.answer(text)


@dp.message_handler(commands='donate', state='*')
async def _user_top_up_balance(message: Message, user: User):
    text = (f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {round(user.balance, 2)} –≥—Ä–Ω.\n\n'
            f'–í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É –≤ –≥—Ä–Ω–ª—è—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üëá')

    await message.answer(text)
    await Balance.top_up_balance.set()


@dp.message_handler(state=Balance.top_up_balance)
async def _user_top_up_balance_invoice(message: Message, user: User, session, state):
    amount = message.text
    if not amount.isnumeric():
        return await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 550')

    bill = await create_bill(session, amount, message.from_user.id)
    logger.info(f'{user} create {bill}')

    link = generate_invoice_link(bill)

    text = (f'–ù–æ–º–µ—Ä: {bill.id}\n'
            f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É: {amount}\n\n'
            f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏–ª ‚úÖ"')

    await message.answer(text, reply_markup=get_payment_inline_markup(link, bill.id))
    await state.finish()


@dp.callback_query_handler(state='*', confirm_payment=True)
async def _check_bill(call: CallbackQuery, bill: Bill, session, user: User):
    bill = await check_bill(session, bill, user)

    if bill:
        await call.message.delete()
        return await call.message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ')

    return await call.answer('–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—É—Ç—å –ø–æ–∑–∂–µ', show_alert=True)
